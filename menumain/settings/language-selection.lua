---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Akoutin.
--- DateTime: 29.03.2022 19:05
---


local composer = require( "composer" )
local scene = composer.newScene()
local widget = require "widget"

function scene:create( event )
    local sceneGroup = self.view

    --create BACKGROUND image
    local background = display.newImage( sceneGroup, "creatives/backgrounds/menu-background2.png", display.contentWidth, display.contentHeight )
    background.anchorX = 0
    background.anchorY = 0
    background.x, background.y = 0, 0
    background.alpha = 0.5
    sceneGroup:insert( background )

    -- create options for FLAGS IMAGES
    local imageFlagOptions =
    {
        -- The params below are required
        width = 600,
        height = 300,
        numFrames = 2,

        -- The params below are optional (used for dynamic image selection)
        sheetContentWidth = 800,  -- width of original 1x size of entire sheet
        sheetContentHeight = 600  -- height of original 1x size of entire sheet
    }

    -- create FLAGS IMAGES

    local enFlagImageSheet = graphics.newImageSheet( "creatives/settings-interface/en-flag.png", imageFlagOptions)
    local ruFlagImageSheet = graphics.newImageSheet( "creatives/settings-interface/ru-flag.png", imageFlagOptions)
    local frFlagImageSheet = graphics.newImageSheet( "creatives/settings-interface/fr-flag.png", imageFlagOptions)

    local enFlagImage = display.newImage( enFlagImageSheet, 1 )
    enFlagImage.x = display.contentCenterX
    enFlagImage.y = display.contentCenterY - 200
    enFlagImage.isVisible = true

    local ruFlagImage = display.newImage( ruFlagImageSheet, 1 )
    ruFlagImage.x = display.contentCenterX
    ruFlagImage.y = display.contentCenterY - 200
    ruFlagImage.isVisible = false

    local frFlagImage = display.newImage( frFlagImageSheet, 1 )
    frFlagImage.x = display.contentCenterX
    frFlagImage.y = display.contentCenterY - 200
    frFlagImage.isVisible = false

    local function flagHiding ()
        enFlagImage.isVisible = false
        ruFlagImage.isVisible = false
        frFlagImage.isVisible = false
    end

    -- create locals for buttons
    local readyButton
    local languageCount
    local buttonLeft
    local buttonRight


    -- button's functions

    local function readyButtonEvent( event )

        if ( "ended" == event.phase ) then
            print( "Button was pressed and released" )
            if languageCount==1 then composer.gotoScene( "menumain.character-screen.character-screen" )
            else print(1) end

            composer.removeScene( "menumain.settings.language-selection" )
            background.isVisible = false
            display.remove( background )
            background = nil
            display.remove( readyButton )
            readyButton = nil
            display.remove( buttonLeft )
            buttonLeft = nil
            display.remove( buttonRight )
            buttonRight = nil
            display.remove( enFlagImage )
            enFlagImage = nil
            display.remove( ruFlagImage )
            ruFlagImage = nil
            display.remove( frFlagImage )
            frFlagImage = nil
        end
    end

    readyButton = widget.newButton(
            {
                width = 440,
                height = 220,
                defaultFile = "creatives/settings-interface/ready-lang.png",
                overFile = "creatives/settings-interface/ready-lang-realised.png",
                label = "button",
                onEvent = readyButtonEvent
            }
    )

    -- Center the button
    readyButton.x = display.contentCenterX
    readyButton.y = display.contentCenterY + 200

    -- Change the button's label text
    readyButton:setLabel( "2-Image" )



    local function languageChangeFlags (argument1, argument2)
        if argument2 == 1 then flagHiding () end
        if argument2 == 1 then enFlagImage.isVisible = true end
        if argument2 == 2 then flagHiding () end
        if argument2 == 2 then ruFlagImage.isVisible = true end
        if argument2 == 3 then flagHiding () end
        if argument2 == 3 then frFlagImage.isVisible = true end

    end

    languageCount = 1
    local function languageChange (argument1, argument2)
        if languageCount == 1 and argument2 == (-1) then argument2 = 0 end
        if languageCount == 3 and argument2 == (1) then argument2 = 0 end
        languageCount = languageCount + argument2
        languageChangeFlags(argument1, languageCount)
    end


    -- Function to handle button events
    local function handleLeftButtonEvent( event )

        if ( "ended" == event.phase ) then
            print( "Button was pressed and released" )
        languageChange("left", -1)
        end
    end

    local function handleRightButtonEvent( event )

        if ( "ended" == event.phase ) then
            print( "Button was pressed and released" )
            languageChange("right", 1)
        end
    end

    buttonLeft = widget.newButton(
            {
                width = 340,
                height = 170,
                defaultFile = "creatives/settings-interface/choice-left.png",
                overFile = "creatives/settings-interface/choice-left-realised.png",
                label = "button",
                onEvent = handleLeftButtonEvent
            }
    )

    -- Center the button
    buttonLeft.x = display.contentCenterX - 600
    buttonLeft.y = display.contentCenterY + 100

    -- Change the button's label text
    buttonLeft:setLabel( "2-Image" )

    buttonRight = widget.newButton(
            {
                width = 340,
                height = 170,
                defaultFile = "creatives/settings-interface/choice-right.png",
                overFile = "creatives/settings-interface/choice-right-realised.png",
                label = "button",
                onEvent = handleRightButtonEvent
            }
    )

    -- Center the button
    buttonRight.x = display.contentCenterX + 600
    buttonRight.y = display.contentCenterY + 100

    -- Change the button's label text
    buttonRight:setLabel( "2-Image" )



end

function scene:show( event )
    local sceneGroup = self.view
    local phase = event.phase

    if phase == "will" then
        -- Called when the scene is still off screen and is about to move on screen
    elseif phase == "did" then
        -- Called when the scene is now on screen
        --
        -- INSERT code here to make the scene come alive
        -- e.g. start timers, begin animation, play audio, etc.
    end
end

function scene:hide( event )
    local sceneGroup = self.view
    local phase = event.phase

    if event.phase == "will" then
        -- Called when the scene is on screen and is about to move off screen
        --
        -- INSERT code here to pause the scene
        -- e.g. stop timers, stop animation, unload sounds, etc.)
    elseif phase == "did" then
        -- Called when the scene is now off screen

    end
end

function scene:destroy( event )
    local sceneGroup = self.view



end

---------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-----------------------------------------------------------------------------------------
return scene