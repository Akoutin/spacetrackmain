---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Akoutin.
--- DateTime: 29.03.2022 19:05
---


local composer = require( "composer" )
local scene = composer.newScene()
local widget = require "widget"

function scene:create( event )
    local sceneGroup = self.view

    --create background image
    local background = display.newImage( sceneGroup, "creatives/backgrounds/menu-background2.png", display.contentWidth, display.contentHeight )
    background.anchorX = 0
    background.anchorY = 0
    background.x, background.y = 0, 0
    background.alpha = 0.5
    sceneGroup:insert( background )

    local options =
    {
        -- The params below are required
        width = 600,
        height = 300,
        numFrames = 2,

        -- The params below are optional (used for dynamic image selection)
        sheetContentWidth = 1920,  -- width of original 1x size of entire sheet
        sheetContentHeight = 1080  -- height of original 1x size of entire sheet
    }

    local enFlagImageSheet = graphics.newImageSheet( "creatives/settings-interface/en-flag.png", options )
    local ruFlagImageSheet = graphics.newImageSheet( "creatives/settings-interface/ru-flag.png", options )
    local frFlagImageSheet = graphics.newImageSheet( "creatives/settings-interface/fr-flag.png", options )

    local enFlagImage = display.newImage( enFlagImageSheet, 1 )
    enFlagImage.x = display.contentCenterX
    enFlagImage.y = display.contentCenterY - 200
    enFlagImage.isVisible = false

    local ruFlagImage = display.newImage( ruFlagImageSheet, 1 )
    ruFlagImage.x = display.contentCenterX
    ruFlagImage.y = display.contentCenterY - 200
    ruFlagImage.isVisible = false

    local frFlagImage = display.newImage( frFlagImageSheet, 1 )
    frFlagImage.x = display.contentCenterX
    frFlagImage.y = display.contentCenterY - 200
    frFlagImage.isVisible = false


--[[    local enFlag = display.newImage( "creatives/settings-interface/en-flag.png", options )
    enFlag:translate( 100, 100 )]]


    local function languageChangeFlags (argument1, argument2)
        if argument2 == 1 then  end
    end


    local function languageChange (argument1, argument2)
        local languageCount = 1
        if languageCount == 1 and argument2 == (-1) then argument2 = 0 end
        if languageCount == 2 and argument2 == (1) then argument2 = 0 end
        languageCount = languageCount + argument2
        languageChangeFlags(argument1, languageCount)
    end


    -- Function to handle button events
    local function handleLeftButtonEvent( event )

        if ( "ended" == event.phase ) then
            print( "Button was pressed and released" )
        languageChange("left", -1)
        end
    end

    local function handleRightButtonEvent( event )

        if ( "ended" == event.phase ) then
            print( "Button was pressed and released" )
            languageChange("right", 1)
        end
    end

    local buttonLeft = widget.newButton(
            {
                width = 340,
                height = 170,
                defaultFile = "creatives/settings-interface/choice-left.png",
                overFile = "creatives/settings-interface/choice-left-realised.png",
                label = "button",
                onEvent = handleLeftButtonEvent
            }
    )

    -- Center the button
    buttonLeft.x = display.contentCenterX - 600
    buttonLeft.y = display.contentCenterY + 100

    -- Change the button's label text
    buttonLeft:setLabel( "2-Image" )

    local buttonRight = widget.newButton(
            {
                width = 340,
                height = 170,
                defaultFile = "creatives/settings-interface/choice-right.png",
                overFile = "creatives/settings-interface/choice-right-realised.png",
                label = "button",
                onEvent = handleRightButtonEvent
            }
    )

    -- Center the button
    buttonRight.x = display.contentCenterX + 600
    buttonRight.y = display.contentCenterY + 100

    -- Change the button's label text
    buttonRight:setLabel( "2-Image" )



end

function scene:show( event )
    local sceneGroup = self.view
    local phase = event.phase

    if phase == "will" then
        -- Called when the scene is still off screen and is about to move on screen
    elseif phase == "did" then
        -- Called when the scene is now on screen
        --
        -- INSERT code here to make the scene come alive
        -- e.g. start timers, begin animation, play audio, etc.
    end
end

function scene:hide( event )
    local sceneGroup = self.view
    local phase = event.phase

    if event.phase == "will" then
        -- Called when the scene is on screen and is about to move off screen
        --
        -- INSERT code here to pause the scene
        -- e.g. stop timers, stop animation, unload sounds, etc.)
    elseif phase == "did" then
        -- Called when the scene is now off screen
    end
end

function scene:destroy( event )
    local sceneGroup = self.view

    -- Called prior to the removal of scene's "view" (sceneGroup)
    --
    -- INSERT code here to cleanup the scene
    -- e.g. remove display objects, remove touch listeners, save state, etc.
end

---------------------------------------------------------------------------------

-- Listener setup
scene:addEventListener( "create", scene )
scene:addEventListener( "show", scene )
scene:addEventListener( "hide", scene )
scene:addEventListener( "destroy", scene )

-----------------------------------------------------------------------------------------
return scene